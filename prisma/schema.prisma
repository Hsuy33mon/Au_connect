generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  ALUMNI
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type Job {
  title     String
  company   String
  startedAt DateTime?
}

model Faculty {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  majors Major[]
  users  User[]
}

model Major {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  facultyId String  @db.ObjectId
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  users User[]

  @@unique([name, facultyId], name: "name_facultyId")
  @@index([facultyId])
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  email    String @unique
  role     Role   @default(STUDENT)

  facultyId String? @db.ObjectId
  majorId   String? @db.ObjectId

  intakeYear     Int?
  graduationYear Int?
  createdAt      DateTime @default(now())

  profile Profile?
  faculty Faculty? @relation(fields: [facultyId], references: [id])
  major   Major?   @relation(fields: [majorId], references: [id])

  posts    Post[]
  comments Comment[]
  likes    Like[]

  messagesSent     Message[] @relation("messagesSent")
  messagesReceived Message[] @relation("messagesReceived")

  requestsSent     Connection[] @relation("requester")
  requestsReceived Connection[] @relation("recipient")

  @@index([facultyId])
  @@index([majorId])
}

model Profile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  dateOfBirth DateTime?
  address     String?
  bio         String?
  jobs        Job[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  likes    Like[]

  @@index([authorId, createdAt])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId, createdAt])
}

model Like {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  postId   String @db.ObjectId
  post     Post   @relation(fields: [postId], references: [id])
  authorId String @db.ObjectId
  author   User   @relation(fields: [authorId], references: [id])

  @@unique([postId, authorId])
  @@index([postId])
}

model Message {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String @db.ObjectId
  receiverId String @db.ObjectId

  sender   User @relation("messagesSent", fields: [senderId], references: [id])
  receiver User @relation("messagesReceived", fields: [receiverId], references: [id])

  text   String
  sentAt DateTime @default(now())

  @@index([senderId, receiverId, sentAt])
  @@index([receiverId, sentAt])
}

model Connection {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  requesterId String @db.ObjectId
  recipientId String @db.ObjectId

  requester User @relation("requester", fields: [requesterId], references: [id])
  recipient User @relation("recipient", fields: [recipientId], references: [id])

  status    ConnectionStatus @default(PENDING)
  createdAt DateTime         @default(now())

  @@unique([requesterId, recipientId])
  @@index([recipientId, status])
}
